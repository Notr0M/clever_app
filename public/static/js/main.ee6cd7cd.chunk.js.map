{"version":3,"sources":["client/profile.js","client/client.js","login.js","App.js","serviceWorker.js","index.js"],"names":["Profile","status","logout","console","log","username","onClick","client","this","isAuth","token","localStorage","getItem","fetch","method","headers","Promise","resolve","reject","success","message","cb","removeItem","loading","data","user","email","password","body","JSON","stringify","then","res","a","json","result","setToken","first","errMessage","catch","err","setItem","Login","login","className","onSubmit","placeholder","type","name","required","value","App","useState","setStatus","useEffect","checkToken","style","color","e","preventDefault","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.ee6cd7cd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Profile({ status, logout }) {\r\n\tconsole.log(status);\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h4>Welcome {status.username}</h4>\r\n\t\t\t<hr />\r\n\t\t\t<button onClick={logout}>Logout</button>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Profile;","class Client{\r\n\tconstructor() {\r\n\t\tthis.isAuth = false;\r\n\t\tthis.token = localStorage.getItem('token');\r\n\t\tconsole.log(this.token);\r\n\t}\r\n\tcheckToken() {\r\n\t\tif(!this.token) {\r\n\t\t\tconsole.log(\"undefined\");\r\n\t\t\treturn new Promise((resolve,reject) => {\r\n\t\t\t\treject({\r\n\t\t\t\t\tsuccess: false,\r\n\t\t\t\t\tmessage: \"Provide token\"\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconsole.log(\"fetch\");\r\n\t\t\treturn fetch(\"/check\", {\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\theaders: {\r\n\t\t\t\t\ttoken: this.token\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n  }\r\n\tlogout(cb) {\r\n\t\tconsole.log(\"loging out\");\r\n\t\tlocalStorage.removeItem('token');\r\n\t\tcb({\r\n\t\t\tisAuth: false,\r\n\t\t\tloading: false,\r\n\t\t\tmessage: \"Successfully logged out\"\r\n\t\t});\r\n\t}\r\n\tlogin(data, cb) {\r\n\t\tcb({\r\n\t\t\tloading: true\r\n\t\t})\r\n\t\tconsole.log(data);\r\n\t\tconst user = {\r\n\t\t\temail: data.email,\r\n\t\t\tpassword: data.password\r\n\t\t}\r\n\t\tfetch(\"/api/login\", {\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t'accept': 'application/json'\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(user)\r\n\t\t}).then(async res => {\r\n\t\t\t\tlet result = await res.json();\r\n\t\t\t\tthis.setToken(result.token);\r\n\t\t\t\tif(result.success) {\r\n\t\t\t\t\tcb({\r\n\t\t\t\t\t\tloading: false,\r\n\t\t\t\t\t\tisAuth: true,\r\n\t\t\t\t\t\tusername: result.first\r\n\t\t\t\t\t})\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log(result);\r\n\t\t\t\t\tcb({\r\n\t\t\t\t\t\tloading: false,\r\n\t\t\t\t\t\tisAuth: false,\r\n\t\t\t\t\t\terrMessage: \"Your ID or Password is wrong\"\r\n\t\t\t\t\t})\r\n\t\t\t\t}\t\t\t\t\t\r\n\t\t\t})\r\n\t\t\t.catch(err => console.log(\"Login Err\"));\r\n\t}\r\n\tgetToken() {\r\n\t\treturn this.token;\r\n\t}\r\n\tsetToken(token) {\r\n\t\tthis.token = token;\r\n\t\tlocalStorage.setItem('token', token);\r\n\t}\r\n}\r\nconst client = new Client();\r\n\r\nexport default client;","import React from 'react';\r\n\r\nexport default function Login({ login }) {\r\n\t//console.log(status);\r\n\treturn (\r\n\t\t<div className=\"toggle-page\">\r\n\t\t\t<h3> Login  </h3>\r\n\t\t\t<form onSubmit={login}>\r\n\t\t\t\t<input\r\n\t\t\t\t\tplaceholder=\"Username\"\r\n\t\t\t\t\tclassName=\"user\"\r\n\t\t\t\t\ttype=\"email\" \r\n\t\t\t\t\tname=\"username\"\r\n\t\t\t\t\trequired\r\n\t\t\t\t/> <br />\r\n\t\t\t\t<input required placeholder=\"Password\" type=\"password\" name=\"password\" /> <br />\r\n\t\t\t\t<input type=\"submit\" value=\"Login\" /> \r\n\t\t\t</form>\r\n\t\t\t<p>no Account? create</p>\r\n\t\t</div>\r\n\t);\r\n}","import React, { useState, useEffect } from 'react';\n\nimport Profile from './client/profile';\nimport client from './client/client';\nimport Login from './login';\n\nimport './App.css';\n\nfunction isAuth(cb) {\n\tclient.checkToken()\n\t\t.then(async res => {\n\t\t\tlet result = await res.json();\n\t\t\tif(result.success) {\n\t\t\t\tconsole.log(\"success\")\n\t\t\t\tcb({\n\t\t\t\t\tloading: false,\n\t\t\t\t\tisAuth: true,\n\t\t\t\t\tuser: result.user\n\t\t\t\t\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconsole.log(\"failed\")\n\t\t\t\tcb({\n\t\t\t\t\tloading: false,\n\t\t\t\t\tisAuth: false\n\t\t\t\t\t\n\t\t\t\t});\n\t\t\t}\n\t\t})\n\t\t.catch(err => {\n\t\t\tconsole.log(\"err in App\")\n\t\t\tcb({\n\t\t\t\tloading: false,\n\t\t\t\tisAuth: false,\n\t\t\t\terrMessage: \"\"\n\t\t\t})\n\t\t});\n}\n\nfunction App() {\n\tconsole.log(\"APP\");\n\tconst [status, setStatus] = useState({\n\t\tloading: true,\n\t\tisAuth: false,\n\t\tusername: null,\n\t\tmessage: \"\",\n\t\terrMessage: \"\"\n\t});\n\tuseEffect(() => {\n\t\tisAuth(setStatus)\n\t}, []);\n\tconst login = (e) => {\n\t\te.preventDefault();\n\t\tstatus.loading = true;\n\t\tclient.login({\n\t\t\temail: e.target[0].value,\n\t\t\tpassword: e.target[1].value\n\t\t}, setStatus);\n\t};\t\n\tconst logout = (e) => {\n\t\te.preventDefault();\n\t\tclient.logout(setStatus);\n\t}\n\treturn (\n\t\t<div className=\"App\" >\n\t\t\t<h4>Hello</h4>\n\t\t\t<span style={{color: \"green\"}}>{status.message}</span>\n\t\t\t<span style={{color: \"red\"}}>{status.errMessage}</span>\n\t\t\t{status.loading ? <div className=\"loader\"></div> : \n\t\t\t\t(status.isAuth ? <Profile status={status} logout={logout} /> : \n\t\t\t\t\t<Login login={login} />\n\t\t\t\t)\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default App;\n/*import QuoteApi from './quoteApi';\nimport Login from './login'\nimport CreateAccount from './createAccount'\nimport Home from './home'\nimport Profile from './profile';\nimport NotFound from './notFound';\nimport User from './user';\nimport Data from './data';\nimport PrivateRoute from './privateRoute';\nimport client from './client/client';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction checkAuth() {\n\treturn new Promise((resolve, reject) => {\n\t\tif(localStorage.getItem('token')){\n\t\t\tfetch(\"http://localhost:8080/check\", {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: {\n\t\t\t\t\taccept: \"application/json\",\n\t\t\t\t\ttoken: localStorage.getItem('token')\n\t\t\t\t}\n\t\t\t}).then(async res => {\n\t\t\t\tconst response = await res.json();\n\t\t\t\tif(response.success) {\n\t\t\t\t\tresolve({isAuth: true, loading: false, username: response.user.first})\n\t\t\t\t} else {\n\t\t\t\t\treject({isAuth:false, error: \"token is not valid\", loading: false});\n\t\t\t\t}\n\t\t\t}).catch(err => console.log(\"500 server err\"));\n\t\t} else {\n\t\t\treject({\n\t\t\t\tisAuth: false,\n\t\t\t\terror: \"provide api token\",\n\t\t\t\tloading: false\n\t\t\t});\n\t\t}\n\t});\n}\n\nfunction App() {\n\tconst [status, setStatus] = useState({\n\t\tloading: true,\n\t\tisAuth: false,\n\t\tusername: undefined\n\t});\n\t//const [isAuth,setIsAuth] = useState(false);\n\tReact.useEffect(() => {\n\t\tcheckAuth().then(async res => {\n\t\t\tsetStatus({\n\t\t\t\tloading: false,\n\t\t\t\tisAuth: true,\n\t\t\t\tusername: res.username\n\t\t\t});\n\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log(\"not token or expired\");\n\t\t\t\tsetStatus({\n\t\t\t\t\tloading: false,\n\t\t\t\t\tisAuth: false,\n\t\t\t\t\tusername: undefined\n\t\t\t\t});\n\t\t\t});\n\t}, []); \n\tconsole.log(client);\n  return (\n    <div className=\"App\">\n\t\t\t<Profile />\n\t\t\t<Router>\n\t\t\t\t<Link to=\"/\"><button>Home</button> </Link>\n\t\t\t\t<Link to=\"/data\"><button>fetch data</button> </Link>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/\"  >\n\t\t\t\t\t\t<Home status={status}/>\n\t\t\t\t\t</Route>\n\t\t\t\t\t\n\t\t\t\t\t<Route path=\"/user\">\n\t\t\t\t\t\t<User />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route  path=\"/login\">\n\t\t\t\t\t\t<Login status={status}/>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path=\"/create\">\n\t\t\t\t\t\t<CreateAccount />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<PrivateRoute path=\"/data\">\n\t\t\t\t\t\t<Data />\n\t\t\t\t\t</PrivateRoute>\n\t\t\t\t\t<Route path=\"*\">\n\t\t\t\t\t\t<NotFound />\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</Router>\n      <header className=\"App-header\">\n\t\t\t\t<QuoteApi />\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n} \nexport default App;\n\n\n/*\nfunction App() {\n\t\n\tconst handleClick = () => {\n\t\tconsole.log('called');\n\t}\n\treturn (\n\t\t<div>\n\t\t\t<button onClick={handleClick}>click</button><br />\n\t\t\t<Router>\n\t\t\t\t<Link to=\"/\">home</Link><br />\n\t\t\t\t<Link to=\"/about\">about</Link><br />\n\t\t\t\t<Link to=\"/contact\">contact</Link><br />\n\t\t\t\t<Link to=\"/contact/johnny\">johnny</Link><br />\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t\t<Home />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path=\"/about\">\n\t\t\t\t\t\t<About />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path=\"/contact/:id\">\n\t\t\t\t\t\t<Data />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path=\"/contact\">\n\t\t\t\t\t\t<Contact />\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t</div>\n\t);\n}\nfunction Home() {\n\treturn <>Home</>\n}\nfunction About() {\n\treturn <>About</>\n}\nfunction Contact() {\n\tconsole.log(\"contact\")\n\treturn <>Contact</>\n}\nfunction Data() {\n\tlet history = useHistory();\n\tlet location = useLocation();\n\tfunction handleClick() {\n\t\thistory.push(\"/about\");\n\t}\n\tconsole.log(location);\n\treturn(\n\t\t<div>\n\t\t\tData\n\t\t\t<button onClick={handleClick}>click</button>\n\t\t</div>\n\t); \n}*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import auth from './auth';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}